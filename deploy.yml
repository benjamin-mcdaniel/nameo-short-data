- name: Deploy Lambda Function and API Gateway
  hosts: localhost
  gather_facts: false
  vars:
    aws_region: us-west-2

  tasks:
    - name: Install AWS CLI
      become: yes
      pip:
        name: awscli

    - name: Configure AWS CLI
      become: yes
      command: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region "{{ aws_region }}"
      args:
        executable: /bin/bash

    - name: Package Lambda function
      become: yes
      command: aws cloudformation package --template-file template.yml --s3-bucket my-bucket --output-template-file packaged-template.yml

    - name: Deploy Lambda function
      become: yes
      command: aws cloudformation deploy --template-file packaged-template.yml --stack-name my-stack --capabilities CAPABILITY_IAM

    - name: Create API Gateway
      become: yes
      command: aws apigateway create-rest-api --name "My API" --region "{{ aws_region }}"
      register: api_gateway

    - name: Get API Gateway ID
      set_fact:
        api_gateway_id: "{{ api_gateway['restApiId'] }}"

    - name: Create API Gateway deployment
      become: yes
      command: aws apigateway create-deployment --rest-api-id "{{ api_gateway_id }}" --stage-name dev

    - name: Create API Gateway resource
      become: yes
      command: aws apigateway create-resource --rest-api-id "{{ api_gateway_id }}" --parent-id "{{ api_gateway['parentId'] }}" --path-part "my-resource"
      register: api_resource

    - name: Get API Gateway resource ID
      set_fact:
        api_resource_id: "{{ api_resource['id'] }}"

    - name: Create API Gateway method
      become: yes
      command: aws apigateway put-method --rest-api-id "{{ api_gateway_id }}" --resource-id "{{ api_resource_id }}" --http-method GET --authorization-type NONE

    - name: Create API Gateway integration
      become: yes
      command: aws apigateway put-integration --rest-api-id "{{ api_gateway_id }}" --resource-id "{{ api_resource_id }}" --http-method GET --type AWS --integration-http-method POST --uri "arn:aws:apigateway:{{ aws_region }}:lambda:path/2015-03-31/functions/{{ lambda_arn }}/invocations"

    - name: Create API Gateway method response
      become: yes
      command: aws apigateway put-method-response --rest-api-id "{{ api_gateway_id }}" --resource-id "{{ api_resource_id }}" --http-method GET --status-code 200 --response-models application/json=Empty

    - name: Create API Gateway integration response
      become: yes
      command: aws apigateway put-integration-response --rest-api-id "{{ api_gateway_id }}" --resource-id "{{ api_resource_id }}" --http-method GET --status-code 200 --response-templates application/json=""

    - name: Get API Gateway URL
      become: yes
      command: aws apigateway get-stage --rest-api-id "{{ api_gateway_id }}" --stage-name dev
